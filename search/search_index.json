{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeView","text":"<p>Android Library to make it easy to create your CodeEditor or IDE for any programming language  even for your programming language, just config the view with your language keywords and other attributes and you can change the CodeView theme in the runtime so it's made it easy to support any number of themes,  and CodeView has AutoComplete and you can customize it with different keywords and tokenizers.</p>"},{"location":"#main-features","title":"Main Features","text":"<ul> <li>Can support any programming language you want.</li> <li>Can support AutoComplete and customize it with different tokenizers and design.</li> <li>Can support any theme you want and change it in the runtime.</li> <li>Syntax Highlighter depend on your patterns so you can support any features like TODO comment.</li> <li>Can support errors and warns with different colors and remove them in the runtime.</li> <li>Can change highlighter update delay time.</li> <li>Support Code snippets and change it in the runtime.</li> <li>Support optional Line Number with customization.</li> <li>Support optional highlighting current line number.</li> <li>Support optional relative line number inspired from vim editor.</li> <li>Support Auto indentation with customization.</li> <li>Support highlighting matching tokens.</li> <li>Support replace first and replace all matching tokens.</li> <li>Support auto pair complete.</li> </ul> <p>We are open to any new feature request, bug fix request, and pull request.</p>"},{"location":"add-to-xml/","title":"Add CodeView to XML layout","text":"<p>It's easy to add CodeView in your XML layout, notes that CodeView is based on AppCompatMultiAutoCompleteTextView, so you can easily customize it like any AutoCompleteTextView</p> <pre><code>&lt;com.amrdeveloper.codeview.CodeView\n    android:id=\"@+id/codeView\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:background=\"@color/darkGrey\"\n    android:dropDownWidth=\"@dimen/dimen150dp\"\n    android:dropDownHorizontalOffset=\"0dp\"\n    android:dropDownSelector=\"@color/darkGrey\"\n    android:gravity=\"top|start\" /&gt;\n</code></pre>"},{"location":"auto-complete/","title":"Auto Complete","text":"<p>You have many options to provide an auto complete feature with CodeView</p>"},{"location":"auto-complete/#providing-a-simple-auto-complete-from-an-array-of-strings","title":"Providing a simple auto complete from an array of strings","text":"<pre><code>// Your language keywords\nString[] languageKeywords = .....\n// List item custom layout \nint layoutId = .....\n// TextView id on your custom layout to put suggestion on it\nint viewId = .....\n// Create ArrayAdapter object that contain all information\nArrayAdapter&lt;String&gt; adapter = new ArrayAdapter&lt;&gt;(context, layoutId, viewId, languageKeywords);\n// Set the adapter on CodeView object\ncodeView.setAdapter(adapter);\n</code></pre>"},{"location":"auto-complete/#providing-more-advanced-auto-complete-from-list-of-keyword-class","title":"Providing more advanced auto complete from list of Keyword class","text":"<ul> <li>This option is better if you want to provide title and prefix for your keywords, also it more easier to use it with snippets feature.</li> </ul> <pre><code>List&lt;Code&gt; codes = new ArrayList&lt;&gt;();\ncodes.add(new Keyword(..., ..., ...));\n\n// Your language keywords\nString[] languageKeywords = .....\n// List item custom layout\nint layoutId = .....\n// TextView id on your custom layout to put suggestion on it\nint viewId = .....\n\nCodeViewAdapter codeAdapter = new CodeViewAdapter(context, layoutId, viewId, codes);\ncodeView.setAdapter(codeAdapter);\n</code></pre> <p>In both options you can provide custom layout and custom tokenizer if you need that.</p> <pre><code>codeView.setAutoCompleteTokenizer(tokenizer);\n</code></pre> <p>You can limit the number of suggestions result in the auto complete dialog</p> <pre><code>codeView.setMaxSuggestionsSize(maxSize);\n</code></pre> <p>Set the auto complete list item size in dp to use it to calculate the full dialog size</p> <pre><code>codeView.setAutoCompleteItemHeightInDp(50);\n</code></pre>"},{"location":"auto-indenting/","title":"Auto Indenting","text":"<p>Starting From version 1.2.1 CodeView now have support for customizable Auto indenting.</p>"},{"location":"auto-indenting/#how-auto-indenting-works-in-codeview","title":"How auto indenting works in CodeView?","text":"<p>Basically this feature depend on two set of characters which are indentation starts and ends sets, when user typed character from indentation starts, the indentation level will increased by the tab length,  and if it from indentation ends, indentation level will decreased by the tab length,</p> <p>In some cases the user editing the code from the middle so we can't use the global indentation level, and we need to find the level before this code and apply it.</p> <p>Now after you understanding how auto indenting works, it's time to know how to config it.</p>"},{"location":"auto-indenting/#set-indentations-starts-set-of-characters","title":"Set Indentations Starts set of characters","text":"<pre><code>codeView.setIndentationStarts(indentationStart);\n</code></pre>"},{"location":"auto-indenting/#set-indentations-ends-set-of-characters","title":"Set Indentations Ends set of characters","text":"<pre><code>codeView.setIndentationEnds(indentationEnds);\n</code></pre>"},{"location":"auto-indenting/#enabledisable-auto-indentation","title":"Enable/Disable Auto Indentation","text":"<pre><code>codeView.setEnableAutoIndentation(enableIndentation);\n</code></pre>"},{"location":"auto-indenting/#set-tab-length","title":"Set Tab length","text":"<pre><code>codeView.setTabLength(tabLength);\n</code></pre>"},{"location":"find-and-replace/","title":"Find and Replace","text":"<p>Starting From version 1.2.1 CodeView now have support for find and replace feature easily.</p> <ul> <li>To get a list of tokens that matchs your regex, you can use findMatches method.</li> </ul> <pre><code>List&lt;Token&gt; tokens = codeView.findMatches(regex);\n</code></pre> <ul> <li>To highlight and get the next matching token you can use findNextMatch</li> </ul> <pre><code>Token token = codeView.findNextMatch();\n</code></pre> <ul> <li>To highlight and get the previous matching token you can use findPrevMatch</li> </ul> <pre><code>Token token = codeView.findPrevMatch();\n</code></pre> <ul> <li>You can set differnt color for highlighting matching token depend on your theme</li> </ul> <pre><code>codeView.setMatchingHighlightColor(color);\n</code></pre> <ul> <li>To clear all the matches tokens</li> </ul> <pre><code>codeView.clearMatches();\n</code></pre> <ul> <li>You can replace the first string that matching the regex with other string.</li> </ul> <pre><code>codeView.replaceFirstMatch(regex, replacement);\n</code></pre> <ul> <li>You can replace all strings that matching the regex with other string.</li> </ul> <pre><code>codeView.replaceAllMatches(regex, replacement);\n</code></pre> <p>You will find a full example with UI dialog for this feature in the example app</p>"},{"location":"highlight/","title":"Highlight","text":"<p>The main goal for creating the CodeView library is to not be limited by a list of highlighters that come with any library but to have the ability to create a highlighter for any set of data, so you can highlight and provide other features for any programming language or data.</p>"},{"location":"highlight/#to-highlight-pattern-with-color","title":"To highlight pattern with color.","text":"<pre><code>codeView.addSyntaxPattern(pattern, Color);\n</code></pre>"},{"location":"highlight/#you-can-add-a-map-instead-of-adding-patterns-one-by-one","title":"You can add a Map instead of adding patterns one by one <pre><code>codeView.setSyntaxPatternsMap(syntaxPatterns);\n</code></pre>","text":""},{"location":"highlight/#you-can-also-remove-pattern-in-the-runtime","title":"You can also remove pattern in the runtime <pre><code>codeView.removeSyntaxPattern(pattern);\n</code></pre>","text":""},{"location":"highlight/#highlight-the-text-depend-on-the-new-patterns","title":"Highlight the text depend on the new patterns <pre><code>codeView.reHighlightSyntax();\n</code></pre>","text":""},{"location":"highlight/#un-highlight-all-tokens","title":"Un highlight all tokens <pre><code>codeView.resetHighlighter();\n</code></pre>","text":""},{"location":"highlight/#clear-all-patterns-from-codeview","title":"Clear all patterns from CodeView <pre><code>codeView.resetSyntaxPatternList();\n</code></pre>","text":""},{"location":"highlight/#set-highlighter-update-delay","title":"Set highlighter update delay <pre><code>codeView.setUpdateDelayTime();\n</code></pre>","text":""},{"location":"highlight/#you-can-control-when-to-highlight-the-text","title":"You can control when to highlight the text <pre><code>codeView.highlightWhileTextChanging(highlightWhileTextChanging);\n</code></pre>","text":""},{"location":"highlight/#add-error-line-with-dynamic-color-to-support-error-hint-warnetc","title":"Add error line with dynamic color to support error, hint, warn...etc <pre><code>codeView.addErrorLine(lineNumber, color);\n</code></pre>","text":""},{"location":"highlight/#clear-all-error-lines","title":"Clear all error lines <pre><code>codeView.removeAllErrorLines();\n</code></pre>","text":""},{"location":"highlight/#highlight-the-errors-depend-on-the-error-lines","title":"Highlight the errors depend on the error lines <pre><code>codeView.reHighlightErrors();\n</code></pre>","text":""},{"location":"highlight/#get-the-number-of-errors","title":"Get the number of errors <pre><code>int numberOfErrors = codeView.getErrorsSize();\n</code></pre>","text":""},{"location":"install/","title":"How to install?","text":""},{"location":"install/#add-codeview-from-maven-central","title":"Add CodeView from Maven Central","text":"<pre><code>dependencies { \n    implementation 'io.github.amrdeveloper:codeview:1.3.9'\n}\n</code></pre>"},{"location":"install/#or-add-codeview-from-jcentral","title":"Or Add CodeView from JCentral","text":"<p>Step 1: Add it to your root build.gradle</p> <pre><code>allprojects {\n    epositories {\n        maven { url 'https://jitpack.io' }\n    }\n}\n</code></pre> <p>Step 2: Add the dependency</p> <pre><code>dependencies { \n    implementation 'com.github.AmrDeveloper:CodeView:1.3.9'\n}\n</code></pre>"},{"location":"line-number/","title":"Line Number","text":"<p>Starting From version 1.1.1 CodeView now have support for line number.</p>"},{"location":"line-number/#enabledisable-line-number","title":"Enable/Disable line number","text":"<pre><code>codeView.setEnableLineNumber(true and false);\n</code></pre>"},{"location":"line-number/#check-if-line-number-feature-is-enabled","title":"Check if line number feature is enabled","text":"<pre><code>codeView.isLineNumberEnabled();\n</code></pre>"},{"location":"line-number/#enabledisable-relative-line-number","title":"Enable/Disable relative line number","text":"<pre><code>codeView.setEnableRelativeLineNumber(true and false);\n</code></pre>"},{"location":"line-number/#check-if-relative-line-number-feature-is-enabled","title":"Check if relative line number feature is enabled","text":"<pre><code>codeView.isLineRelativeNumberEnabled();\n</code></pre>"},{"location":"line-number/#enabledisable-highlight-current-line","title":"Enable/Disable highlight current line","text":"<pre><code>codeView.setEnableHighlightCurrentLine(true and false);\n</code></pre>"},{"location":"line-number/#check-if-highlight-current-line-feature-is-enabled","title":"Check if highlight current line feature is enabled","text":"<pre><code>codeView.isHighlightCurrentLineEnabled();\n</code></pre>"},{"location":"line-number/#set-highlight-current-line-color","title":"Set highlight current line color","text":"<pre><code>codeView.setHighlightCurrentLineColor(Color.GREY);\n</code></pre>"},{"location":"line-number/#set-line-number-text-color","title":"Set line number text color","text":"<pre><code>codeView.setLineNumberTextColor(Color.GREY);\n</code></pre>"},{"location":"line-number/#set-line-number-text-size-in-pixels-it-recommended-to-set-it-within-the-range-of-text-size","title":"Set line number text size in pixels, it recommended to set it within the range of text size","text":"<pre><code>codeView.setLineNumberTextSize(size like 30f);\n</code></pre>"},{"location":"line-number/#set-line-number-typeface","title":"Set line number typeface","text":"<pre><code>codeView.setLineNumberTypeface(typeface);\n</code></pre>"},{"location":"pair-complete/","title":"Pair Complete","text":"<p>Starting From version 1.3.0 CodeView now has support for auto pair complete, this feature can help you to implement some features easily such as quote or double quote complete, or closing braces complete.</p> <p>This features is disabled by default to enable or disable it</p> <pre><code>codeView.enablePairComplete(enableFeature);\n</code></pre> <p>To enable or disable move the cursor to the center of the pair after inset it</p> <pre><code>codeView.enablePairCompleteCenterCursor(enableFeature);\n</code></pre> <p>To use this feature you need to create a Map that contains the pairs keys and values for example</p> <pre><code>Map&lt;Character, Character&gt; pairCompleteMap = new HashMap&lt;&gt;();\npairCompleteMap.put('{', '}');\npairCompleteMap.put('[', ']');\npairCompleteMap.put('(', ')');\npairCompleteMap.put('&lt;', '&gt;');\npairCompleteMap.put('\"', '\"');\n\n</code></pre> <p>To add your full pairs map</p> <pre><code>codeView.setPairCompleteMap(pairCompleteMap);\n</code></pre> <p>To add a single pair</p> <pre><code>codeView.addPairCompleteItem('[', ']');\n</code></pre> <p>To remove a single pair</p> <pre><code>codeView.removePairCompleteItem('[');\n</code></pre> <p>To remove all the pairs</p> <pre><code>codeView.clearPairCompleteMap();\n</code></pre>"},{"location":"snippets/","title":"Snippets","text":"<p>Starting From version 1.1.1 CodeView now have support for snippts.</p> <p>In the CodeView library keywords and snippets are classes that implementing the Code interface.</p> <pre><code>public interface Code {\n    String getCodeTitle();\n    String getCodePrefix();\n    String getCodeBody();\n}\n</code></pre> <p>This class has three attributes title, prefix and body, It\u2019s important to know the difference between them</p> <ul> <li> <p>The title is that text that you see on the autocomplete dropdown menu so it can be for example \"Keyword Package\".</p> </li> <li> <p>The prefix is that text that we use it for filtering in the autocomplete adapter for example \"package\"</p> </li> <li> <p>The body is what we inserted in the code when the user types a string that is a subset of the prefix and then he clicks on the title for example \"package main;\"</p> </li> </ul> <p>Add Custom AutoComplete Adapter that support Snippets</p> <pre><code>List&lt;Code&gt; codes = new ArrayList&lt;&gt;();\ncodes.add(new Snippet(..., ..., ...));\n\n// Your language keywords\nString[] languageKeywords = .....\n// List item custom layout\nint layoutId = .....\n// TextView id on your custom layout to put suggestion on it R.layout.yourlayout\nint viewId = .....\n\nCodeViewAdapter codeAdapter = new CodeViewAdapter(context, layoutId, viewId, codes);\ncodeView.setAdapter(codeAdapter);\n</code></pre>"},{"location":"contribution/documentation/","title":"Documentation","text":"<ul> <li> <p>All the documentations are written in Mark Down files in docs directory</p> </li> <li> <p>We use Material MkDocs to generate the website</p> </li> </ul>"},{"location":"contribution/documentation/#how-to-edit-the-docs","title":"How to edit the docs?","text":"<ul> <li>Clone the repository</li> </ul> <pre><code>git clone https://github.com/amrdeveloper/codeview.git\n</code></pre> <ul> <li>Enter the docs directory</li> </ul> <pre><code>cd docs\n</code></pre> <ul> <li>Edit the file, you can see the output live on the website using mkdocs serve,</li> </ul> <pre><code>mkdocs serve\n</code></pre> <ul> <li>Open docs website locally to see the output.</li> </ul> <pre><code>http://127.0.0.1:8000/codeview\n</code></pre> <ul> <li>After finishing the modification, commit and make Pull request.</li> </ul>"},{"location":"contribution/report/","title":"Report Issue","text":"<ul> <li> <p>You're most welcome to report any issue or corner case, but first make sure this issue isn't reported before on the issues list on Github Repository.</p> </li> <li> <p>If it unique, that's very good you should report it by creating new issue and explained when exactly this issue appear and it will be amazing if you can add code example.</p> </li> <li> <p>If you want also to work on this issue, tell us in the end that you can do it and we will start discussion about it.</p> </li> <li> <p>Feel free to share your ideas and hints.</p> </li> </ul>"},{"location":"contribution/suggestion/","title":"Suggest New Feature","text":"<ul> <li> <p>I believe that everyone can add new value to CodeView and any contribution will be very helpful.</p> </li> <li> <p>If you see that any part of this tool can be improved, feel free to make new issue with some information for example which part? code, docs...etc and what is your suggestion to improve it? also do you want to work on this suggestion?</p> </li> <li> <p>After submitting your issue we will have a discussion and brainstorm about this suggestion to see what is the best way to implement it.</p> </li> </ul>"}]}